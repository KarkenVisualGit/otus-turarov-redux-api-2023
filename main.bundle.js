(()=>{"use strict";var e,n,r={738:(e,n,r)=>{let t=function(e){return e.ADD_TO_CART="ADD_TO_CART",e.REMOVE_FROM_CART="REMOVE_FROM_CART",e.SELECT_PRODUCT="SELECT_PRODUCT",e.UPDATE_QUANTITY="UPDATE_QUANTITY",e}({});const o=t;r(618);const a=(i={cart:(e={items:[]},n)=>{switch(n.type){case o.ADD_TO_CART:{const r=e.items.findIndex((e=>e.id===n.payload.id));return-1!==r?{...e,items:e.items.map(((e,n)=>n===r?{...e,quantity:e.quantity+1}:e))}:{...e,items:[...e.items,{...n.payload,quantity:1}]}}case o.REMOVE_FROM_CART:return{...e,items:e.items.filter((e=>e.id!==n.payload))};case o.UPDATE_QUANTITY:return{...e,items:e.items.map((e=>e.id===n.payload.id?{...e,quantity:n.payload.quantity}:e))};case o.SELECT_PRODUCT:return{...e,items:e.items.map((e=>e.id===n.payload?{...e,isSelected:!0}:{...e,isSelected:!1}))};default:return e}}},(e={cart:{items:[]}},n)=>Object.keys(i).reduce(((r,t)=>({...r,[t]:(0,i[t])(e[t],n)})),{}));var i;const c=new class{listeners=[];constructor(e,n={cart:{items:[]}},r=[]){this.reducer=e,this.state=n,this.middlewares=r}getState(){return this.state}dispatch(e){const n=this.middlewares.map((e=>e(this)));let r=this.rawDispatch.bind(this);n.reverse().forEach((e=>{r=e(r)})),r(e)}rawDispatch(e){this.state=this.reducer(this.state,e),this.listeners.forEach((e=>e()))}subscribe(e){return this.listeners.push(e),()=>{this.listeners=this.listeners.filter((n=>n!==e))}}}(a,{cart:{items:[{id:"123",name:"Product 1",quantity:2}]}},[e=>e=>n=>{if("REMOVE_FROM_CART"!==n.type||window.confirm("Вы уверены, что хотите удалить этот товар из корзины?"))return e(n)},e=>n=>r=>{console.log("dispatching",r);const t=n(r);return console.log("next state",e.getState()),t}]);function d(e){const n=document.getElementById("cart");n&&(n.innerHTML="",e.getState().cart.items.forEach((e=>{const r=document.createElement("div");r.innerHTML=`\n          <span>${e.name}</span>\n          <button class="remove-from-cart" data-id="${e.id}">Удалить</button>\n          <input type="number" value="${e.quantity}" \n            data-id="${e.id}" class="product-quantity">\n      `,n.appendChild(r)})),function(e){document.querySelectorAll(".remove-from-cart").forEach((n=>{n.addEventListener("click",(n=>{const r=n.target.dataset.id;var o;r?e.dispatch((o=r,{type:t.REMOVE_FROM_CART,payload:o})):console.error("Product ID is undefined")}))})),document.querySelectorAll(".product-quantity").forEach((n=>{const r=n;let o=r.value;r.addEventListener("focus",(()=>{o=r.value})),r.addEventListener("change",(n=>{const r=n.target,a=r.dataset.id,i=parseInt(r.value,10);var c,d;!a||i<=0?r.value=o:e.dispatch((c=a,d=i,{type:t.UPDATE_QUANTITY,payload:{id:c,quantity:d}}))}))}))}(e))}c.subscribe((()=>{d(c)})),function(e){document.querySelectorAll(".add-to-cart").forEach((n=>{n.addEventListener("click",(n=>{const r=n.target;if(r.parentElement){const n=r.parentElement.dataset.id;n?e.dispatch((o={id:n,name:`Товар ${n}`,quantity:1},{type:t.ADD_TO_CART,payload:o})):console.error("Product ID is undefined")}var o}))}))}(c),d(c)},982:(e,n,r)=>{r.r(n),r.d(n,{default:()=>c});var t=r(537),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([e.id,"body {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #f4f4f4;\n}\n\n#product-list {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 20px;\n}\n\n.add-to-cart {\n  font-size: 12px;\n}\n\n.product {\n  background-color: #fff;\n  border: 1px solid #ddd;\n  padding: 10px;\n  margin: 10px;\n  text-align: center;\n}\n\n.product button {\n  background-color: #5cb85c;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  text-transform: uppercase;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.product button:hover {\n  background-color: #4cae4c;\n}\n\n#cart {\n  background-color: #fff;\n  margin: 20px auto;\n  width: 80%;\n  padding: 20px;\n  border: 1px solid #ddd;\n}\n\n.cart-title {\n  text-align: center;\n  color: #333;\n  font-size: 24px;\n  margin-top: 20px;\n}\n\n.remove-from-cart {\n  background-color: #d9534f;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.remove-from-cart:hover {\n  background-color: #c9302c;\n}\n\n.product-quantity {\n  padding: 5px;\n  width: 50px;\n}\n","",{version:3,sources:["webpack://./src/style/style.css"],names:[],mappings:"AAAA;EACE,8BAA8B;EAC9B,SAAS;EACT,UAAU;EACV,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,eAAe;EACf,uBAAuB;EACvB,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,sBAAsB;EACtB,sBAAsB;EACtB,aAAa;EACb,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,yBAAyB;EACzB,eAAe;EACf,sCAAsC;AACxC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,sBAAsB;EACtB,iBAAiB;EACjB,UAAU;EACV,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,eAAe;EACf,sCAAsC;AACxC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,YAAY;EACZ,WAAW;AACb",sourcesContent:["body {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #f4f4f4;\n}\n\n#product-list {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 20px;\n}\n\n.add-to-cart {\n  font-size: 12px;\n}\n\n.product {\n  background-color: #fff;\n  border: 1px solid #ddd;\n  padding: 10px;\n  margin: 10px;\n  text-align: center;\n}\n\n.product button {\n  background-color: #5cb85c;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  text-transform: uppercase;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.product button:hover {\n  background-color: #4cae4c;\n}\n\n#cart {\n  background-color: #fff;\n  margin: 20px auto;\n  width: 80%;\n  padding: 20px;\n  border: 1px solid #ddd;\n}\n\n.cart-title {\n  text-align: center;\n  color: #333;\n  font-size: 24px;\n  margin-top: 20px;\n}\n\n.remove-from-cart {\n  background-color: #d9534f;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.remove-from-cart:hover {\n  background-color: #c9302c;\n}\n\n.product-quantity {\n  padding: 5px;\n  width: 50px;\n}\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);t&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},618:(e,n,r)=>{var t=r(379),o=r.n(t),a=r(795),i=r.n(a),c=r(569),d=r.n(c),s=r(565),u=r.n(s),l=r(216),p=r.n(l),f=r(589),h=r.n(f),A=r(982),m={};m.styleTagTransform=h(),m.setAttributes=u(),m.insert=d().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=p();var v=o()(A.default,m);if(!A.default.locals||e.hot.invalidate){var y=!A.default.locals,E=y?A:A.default.locals;e.hot.accept(982,(n=>{A=r(982),function(e,n,r){if(!e&&n||e&&!n)return!1;var t;for(t in e)if((!r||"default"!==t)&&e[t]!==n[t])return!1;for(t in n)if(!(r&&"default"===t||e[t]))return!1;return!0}(E,y?A:A.default.locals,y)?(E=y?A:A.default.locals,v(A.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),A.default&&A.default.locals&&A.default.locals},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},i=[],c=0;c<e.length;c++){var d=e[c],s=t.base?d[0]+t.base:d[0],u=a[s]||0,l="".concat(s," ").concat(u);a[s]=u+1;var p=r(l),f={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)n[p].references++,n[p].updater(f);else{var h=o(f,t);t.byIndex=c,n.splice(c,0,{identifier:l,updater:h,references:1})}i.push(l)}return i}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=r(a[i]);n[c].references--}for(var d=t(e,o),s=0;s<a.length;s++){var u=r(a[s]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=d}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},t={};function o(e){var n=t[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var a=t[e]={id:e,exports:{}};try{var i={id:e,module:a,factory:r[e],require:o};o.i.forEach((function(e){e(i)})),a=i.module,i.factory.call(a.exports,a,a.exports,i.require)}catch(e){throw a.error=e,e}return a.exports}o.m=r,o.c=t,o.i=[],o.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return o.d(n,{a:n}),n},o.d=(e,n)=>{for(var r in n)o.o(n,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"51151d93c4d2f72595dd",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e={},n="otus-turarov-redux-api-2023:",o.l=(r,t,a,i)=>{if(e[r])e[r].push(t);else{var c,d;if(void 0!==a)for(var s=document.getElementsByTagName("script"),u=0;u<s.length;u++){var l=s[u];if(l.getAttribute("src")==r||l.getAttribute("data-webpack")==n+a){c=l;break}}c||(d=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,o.nc&&c.setAttribute("nonce",o.nc),c.setAttribute("data-webpack",n+a),c.src=r),e[r]=[t];var p=(n,t)=>{c.onerror=c.onload=null,clearTimeout(f);var o=e[r];if(delete e[r],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(t))),n)return n(t)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=p.bind(null,c.onerror),c.onload=p.bind(null,c.onload),d&&document.head.appendChild(c)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,n,r,t={},a=o.c,i=[],c=[],d="idle",s=0,u=[];function l(e){d=e;for(var n=[],r=0;r<c.length;r++)n[r]=c[r].call(null,e);return Promise.all(n)}function p(){0==--s&&l("ready").then((function(){if(0===s){var e=u;u=[];for(var n=0;n<e.length;n++)e[n]()}}))}function f(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return l("check").then(o.hmrM).then((function(r){return r?l("prepare").then((function(){var t=[];return n=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,a){return o.hmrC[a](r.c,r.r,r.m,e,n,t),e}),[])).then((function(){return n=function(){return e?A(e):l("ready").then((function(){return t}))},0===s?n():new Promise((function(e){u.push((function(){e(n())}))}));var n}))})):l(m()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+d+")")})):A(e)}function A(e){e=e||{},m();var t=n.map((function(n){return n(e)}));n=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return l("abort").then((function(){throw o[0]}));var a=l("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var i,c=l("apply"),d=function(e){i||(i=e)},s=[];return t.forEach((function(e){if(e.apply){var n=e.apply(d);if(n)for(var r=0;r<n.length;r++)s.push(n[r])}})),Promise.all([a,c]).then((function(){return i?l("fail").then((function(){throw i})):r?A(e).then((function(e){return s.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):l("idle").then((function(){return s}))}))}function m(){if(r)return n||(n=[]),Object.keys(o.hmrI).forEach((function(e){r.forEach((function(r){o.hmrI[e](r,n)}))})),r=void 0,!0}o.hmrD=t,o.i.push((function(u){var A,m,v,y,E=u.module,g=function(n,r){var t=a[r];if(!t)return n;var o=function(o){if(t.hot.active){if(a[o]){var c=a[o].parents;-1===c.indexOf(r)&&c.push(r)}else i=[r],e=o;-1===t.children.indexOf(o)&&t.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),i=[];return n(o)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(r){n[e]=r}}};for(var u in n)Object.prototype.hasOwnProperty.call(n,u)&&"e"!==u&&Object.defineProperty(o,u,c(u));return o.e=function(e){return function(e){switch(d){case"ready":l("prepare");case"prepare":return s++,e.then(p,p),e;default:return e}}(n.e(e))},o}(u.require,u.id);E.hot=(A=u.id,m=E,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==A,_requireSelf:function(){i=m.parents.slice(),e=v?void 0:A,o(A)},active:!0,accept:function(e,n,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._acceptedDependencies[e[t]]=n||function(){},y._acceptedErrorHandlers[e[t]]=r;else y._acceptedDependencies[e]=n||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._declinedDependencies[e[n]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=y._disposeHandlers.indexOf(e);n>=0&&y._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":n=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](A,n)})),l("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](A,n)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(A)}},check:f,apply:h,status:function(e){if(!e)return d;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var n=c.indexOf(e);n>=0&&c.splice(n,1)},data:t[A]},e=void 0,y),E.parents=i,E.children=[],i=[],u.require=g})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var t=r.length-1;t>-1&&!e;)e=r[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,n,r,t,a,i=o.hmrS_jsonp=o.hmrS_jsonp||{179:0},c={};function d(n,r){return e=r,new Promise(((e,r)=>{c[n]=e;var t=o.p+o.hu(n),a=new Error;o.l(t,(e=>{if(c[n]){c[n]=void 0;var t=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;a.message="Loading hot update chunk "+n+" failed.\n("+t+": "+o+")",a.name="ChunkLoadError",a.type=t,a.request=o,r(a)}}))}))}function s(e){function c(e){for(var n=[e],r={},t=n.map((function(e){return{chain:[e],id:e}}));t.length>0;){var a=t.pop(),i=a.id,c=a.chain,s=o.c[i];if(s&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var u=0;u<s.parents.length;u++){var l=s.parents[u],p=o.c[l];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([l]),moduleId:i,parentId:l};-1===n.indexOf(l)&&(p.hot._acceptedDependencies[i]?(r[l]||(r[l]=[]),d(r[l],[i])):(delete r[l],n.push(l),t.push({chain:c.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:r}}function d(e,n){for(var r=0;r<n.length;r++){var t=n[r];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,n=void 0;var s={},u=[],l={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in r)if(o.o(r,f)){var h,A=r[f],m=!1,v=!1,y=!1,E="";switch((h=A?c(f):{type:"disposed",moduleId:f}).chain&&(E="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(h),v=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(v)for(f in l[f]=A,d(u,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,f)&&(s[f]||(s[f]=[]),d(s[f],h.outdatedDependencies[f]));y&&(d(u,[h.moduleId]),l[f]=p)}r=void 0;for(var g,b=[],C=0;C<u.length;C++){var x=u[C],_=o.c[x];_&&(_.hot._selfAccepted||_.hot._main)&&l[x]!==p&&!_.hot._selfInvalidated&&b.push({module:x,require:_.hot._requireSelf,errorHandler:_.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete i[e]})),t=void 0;for(var n,r=u.slice();r.length>0;){var a=r.pop(),c=o.c[a];if(c){var d={},l=c.hot._disposeHandlers;for(C=0;C<l.length;C++)l[C].call(null,d);for(o.hmrD[a]=d,c.hot.active=!1,delete o.c[a],delete s[a],C=0;C<c.children.length;C++){var p=o.c[c.children[C]];p&&(e=p.parents.indexOf(a))>=0&&p.parents.splice(e,1)}}}for(var f in s)if(o.o(s,f)&&(c=o.c[f]))for(g=s[f],C=0;C<g.length;C++)n=g[C],(e=c.children.indexOf(n))>=0&&c.children.splice(e,1)},apply:function(n){for(var r in l)o.o(l,r)&&(o.m[r]=l[r]);for(var t=0;t<a.length;t++)a[t](o);for(var i in s)if(o.o(s,i)){var c=o.c[i];if(c){g=s[i];for(var d=[],p=[],f=[],h=0;h<g.length;h++){var A=g[h],m=c.hot._acceptedDependencies[A],v=c.hot._acceptedErrorHandlers[A];if(m){if(-1!==d.indexOf(m))continue;d.push(m),p.push(v),f.push(A)}}for(var y=0;y<d.length;y++)try{d[y].call(null,g)}catch(r){if("function"==typeof p[y])try{p[y](r,{moduleId:i,dependencyId:f[y]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:f[y],error:t,originalError:r}),e.ignoreErrored||(n(t),n(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[y],error:r}),e.ignoreErrored||n(r)}}}for(var E=0;E<b.length;E++){var C=b[E],x=C.module;try{C.require(x)}catch(r){if("function"==typeof C.errorHandler)try{C.errorHandler(r,{moduleId:x,module:o.c[x]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:t,originalError:r}),e.ignoreErrored||(n(t),n(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:x,error:r}),e.ignoreErrored||n(r)}}return u}}}self.webpackHotUpdateotus_turarov_redux_api_2023=(n,t,i)=>{for(var d in t)o.o(t,d)&&(r[d]=t[d],e&&e.push(d));i&&a.push(i),c[n]&&(c[n](),c[n]=void 0)},o.hmrI.jsonp=function(e,n){r||(r={},a=[],t=[],n.push(s)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(e,c,u,l,p,f){p.push(s),n={},t=c,r=u.reduce((function(e,n){return e[n]=!1,e}),{}),a=[],e.forEach((function(e){o.o(i,e)&&void 0!==i[e]?(l.push(d(e,f)),n[e]=!0):n[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,r){n&&o.o(n,e)&&!n[e]&&(r.push(d(e)),n[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o.nc=void 0,o(738)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,